// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId Int @id @default(autoincrement())
  roleName String 
  user User[]
}

model User {
  userId Int @id @default(autoincrement())
  roleId Int
  role Role @relation(fields: [roleId], references: [roleId])
  userName String
  userImage String?
  userPhoneNumber String?
  email String @unique
  password String
  address String?
  latitude Float?
  longitude Float?
  pushToken String?
  bakery Bakery?
  order Order[]
  signUpDate DateTime @default(now())
  refreshToken RefreshToken[]
  Favorite Favorite[]
  isCancelled Int
}

model Bakery {
  bakeryId Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [userId])
  bakeryName String
  bakeryImage String
  bakeryDescription String
  bakeryPhoneNumber String
  openingTime String
  closingTime String
  bakeryAddress String
  bakeryLatitude Float
  bakeryLongitude Float
  product Product[]
  favorite Favorite[]
  order Order[]
  payment Payment[]
}

model Payment {
  paymentId Int @id @default(autoincrement())
  bakeryId Int
  bakery Bakery @relation(fields: [bakeryId], references: [bakeryId])
  paymentMethod String
  paymentService String
  paymentDetail String
}

model Category {
  categoryId Int @id @default(autoincrement())
  categoryName String
  categoryImage String
  product Product[]
}

model Product {
  productId Int @id @default(autoincrement())
  bakeryId Int
  bakery Bakery @relation(fields: [bakeryId], references: [bakeryId])
  categoryId Int
  category Category @relation(fields: [categoryId], references: [categoryId])
  productName String
  productPrice Decimal @db.Decimal(10, 2)
  productImage String
  productDescription String
  productCreatedDate DateTime @default(now())
  productExpirationDate DateTime
  productStock Int
  isActive Int @default(1)
  discount ListDiscount[]
  orderDetail OrderDetail[]
}

model ListDiscount {
  discountId Int @id @default(autoincrement())
  productId Int
  product Product @relation(fields: [productId], references: [productId])
  discountDate DateTime
  discountAmount Decimal @db.Decimal(10, 2)
}

model Order {
  orderId Int @id @default(autoincrement())
  userId Int
  bakeryId Int
  user User @relation(fields: [userId], references: [userId])
  bakery Bakery @relation(fields: [bakeryId], references: [bakeryId])
  orderDate DateTime @default(now())
  orderStatus Int @default(0)
  orderDetail OrderDetail[]
  rating Rating?
  proofOfPayment String?
  paymentStartedAt DateTime?
}

model OrderDetail {
  orderDetailId Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [orderId])
  productId Int
  product Product @relation(fields: [productId], references: [productId])
  productQuantity Int
}

model Favorite {
  favoriteId Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [userId])
  bakeryId Int
  bakery Bakery @relation(fields: [bakeryId], references: [bakeryId])
  @@unique([userId, bakeryId])
}

model RefreshToken {
  jti String @id @default(uuid())
  hashedToken String
  userId Int
  user User @relation(fields: [userId], references: [userId])
  revoked Boolean @default(false)
  createdDate DateTime @default(now())
}

model Rating {
  ratingId Int @id @default(autoincrement())
  orderId Int @unique
  order Order? @relation(fields: [orderId], references: [orderId])
  rating Int
  review String
  createdDate DateTime @default(now())
}